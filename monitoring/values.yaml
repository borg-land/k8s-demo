grafana:
  resources:
   limits:
     cpu: 4000m
     memory: 2048Mi
   requests:
     cpu: 500m
     memory: 1024Mi
  env:
    AWS_ROLE_ARN: arn:aws:iam::691556712356:role/gke-grafana
    AWS_WEB_IDENTITY_TOKEN_FILE: /var/run/secrets/aws-iam-token/serviceaccount/token
    AWS_REGION: eu-central-1
    AWS_ROLE_SESSION_NAME: grafana
  extraSecretMounts:
    - name: aws-iam-token
      readOnly: true
      mountPath: /var/run/secrets/aws-iam-token/serviceaccount
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            audience: sts.amazonaws.com
            expirationSeconds: 86400
            path: token
  sidecar:
    dashboards:
      enabled: true
      searchNamespace: ALL
    datasources:
      defaultDatasourceEnabled: false
  serviceAccount:
    create: true
    name: grafana
    annotations:
      iam.gke.io/gcp-service-account: grafana@coen-mahamed-ali.iam.gserviceaccount.com
  deploymentStrategy:
    type: Recreate # blame the PVC but this should be infrequent
  persistence:
    enabled: true
    size: 50Gi
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: Prometheus
          type: prometheus
          url: http://frontend.monitoring:9090
          access: proxy
          timeout: 120
          isDefault: true
  plugins:
    - grafana-worldmap-panel
    - grafana-piechart-panel
    - grafana-polystat-panel
    - grafana-x-ray-datasource
    - grafana-athena-datasource
  # extraSecretMounts:
  #   - name: grafana-oauth
  #     secretName: grafana-oauth
  #     defaultMode: 0440
  #     mountPath: /etc/secrets/oauth
  #     readOnly: true
  grafana.ini:
    feature_toggles:
      publicDashboards: "true"
    server:
      root_url: https://grafana.knative.dev
    auth.github:
      enabled: false
      allow_sign_up: true
      scopes: user:email,read:org
      auth_url: https://github.com/login/oauth/authorize
      token_url: https://github.com/login/oauth/access_token
      api_url: https://api.github.com/user
      # role_attribute_path: contains(groups[*], '@knative/productivity-wg-leads') && 'Admin' || contains(groups[*], '@knative/productivity-writers') && 'Editor' || 'Viewer'

kube-prometheus-stack:
  # helm upgrade --install prometheus prometheus-community/kube-prometheus-stack -f helm/prom-operator.yaml -n monitoring
  manageCrds: true
  alertmanager:
    alertmanagerSpec:
      portName: http-web
      externalUrl: https://alertmanager.m.rack.gold
  prometheus:
    prometheusSpec:
      externalUrl: https://prometheus.m.rack.gold
      podMetadata:
        annotations: 
          proxy.istio.io/config: |
            proxyMetadata:
              OUTPUT_CERTS: /etc/istio-certs
          sidecar.istio.io/userVolume: '[{"name": "istio-certs", "emptyDir": {"medium": "Memory"}}]'
          sidecar.istio.io/userVolumeMount: '[{"name": "istio-certs", "mountPath": "/etc/istio-certs"}]'
      volumeMounts:
        - mountPath: /etc/prom-certs/
          name: istio-certs
      volumes:
        - emptyDir:
            medium: Memory
          name: istio-certs
      resources:
        requests:
          memory: "2000Mi"
          cpu: "2000m"
        limits:
          memory: "7096Mi"
          cpu: "4000m"
      serviceMonitorSelectorNilUsesHelmValues: false
      podMonitorSelectorNilUsesHelmValues: false
      ruleSelectorNilUsesHelmValues: false
      probeSelectorNilUsesHelmValues: false
      remoteWrite:
        - url: http://monitoring-mimir-nginx.monitoring.svc.cluster.local:80/api/v1/push
      portName: http-web
      externalLabels: 
        cluster: prod
  prometheusOperator:
    admissionWebhooks:
      enabled: false
      patch:
        enabled: true
        podAnnotations:
          sidecar.istio.io/inject: "false"
    tls:
      enabled: false 
  grafana:
    enabled: false
  prometheus-node-exporter:
    hostNetwork: false
  coreDns:
    enabled: false
  kube-state-metrics:
    # metricLabelsAllowlist:
    #   - pods=[*]
    #   - deployments=[app.kubernetes.io/name,app.kubernetes.io/component,app.kubernetes.io/instance]
    selfMonitor:
      enabled: true

mimir-distributed:
  enabled: true
  mimir:
    structuredConfig:
      blocks_storage:
        backend: gcs
        gcs:
          bucket_name: coen-thanos
        bucket_store:
          chunks_cache:
            backend: memcached
            memcached:
              addresses: 10.104.128.67:11211
              max_item_size: 1048576
              timeout: 450ms
          index_cache:
            backend: memcached
            memcached:
              addresses: 10.104.128.67:11211
              max_item_size: 15728640
          metadata_cache:
            backend: memcached
            memcached:
              addresses: 10.104.128.67:11211
              max_item_size: 1048576

  serviceAccount:
    create: true
    name: mimir
    annotations:
      iam.gke.io/gcp-service-account: thanos@coen-mahamed-ali.iam.gserviceaccount.com

  alertmanager:
    persistentVolume:
      enabled: true
    replicas: 2
    resources:
      limits:
        cpu: 2
        memory: 1.4Gi
      requests:
        cpu: 1
        memory: 1Gi
    statefulSet:
      enabled: true

  compactor:
    persistentVolume:
      size: 20Gi
    resources:
      limits:
        cpu: 2
        memory: 2.1Gi
      requests:
        cpu: 1
        memory: 1.5Gi

  distributor:
    replicas: 2
    resources:
      limits:
        cpu: 4
        memory: 5.7Gi
      requests:
        cpu: 2
        memory: 4Gi

  ingester:
    persistentVolume:
      size: 50Gi
    replicas: 3
    resources:
      limits:
        cpu: 2
        memory: 4Gi
      requests:
        cpu: 1
        memory: 2.5Gi
    topologySpreadConstraints: {}

  minio:
    enabled: false

  overrides_exporter:
    replicas: 1
    resources:
      limits:
        cpu: 500m
        memory: 128Mi
      requests:
        cpu: 100m
        memory: 128Mi

  querier:
    replicas: 1
    resources:
      limits:
        cpu: 4
        memory: 5.6Gi
      requests:
        cpu: 2
        memory: 4Gi

  query_frontend:
    replicas: 1
    resources:
      limits:
        cpu: 4
        memory: 2.8Gi
      requests:
        cpu: 2
        memory: 2Gi

  ruler:
    replicas: 1
    resources:
      limits:
        cpu: 2
        memory: 2.8Gi
      requests:
        cpu: 1
        memory: 2Gi

  store_gateway:
    persistentVolume:
      size: 10Gi
    replicas: 3
    resources:
      limits:
        cpu: 2
        memory: 2.1Gi
      requests:
        cpu: 1
        memory: 1.5Gi
    topologySpreadConstraints: {}

  nginx:
    replicas: 1
    resources:
      limits:
        cpu: 2
        memory: 731Mi
      requests:
        cpu: 1
        memory: 512Mi

  gateway:
    replicas: 1
    resources:
      limits:
        cpu: 2
        memory: 731Mi
      requests:
        cpu: 1
        memory: 512Mi

  smoke_test:
    annotations:
      sidecar.istio.io/inject: "false"
